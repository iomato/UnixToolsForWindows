#
# Unix Tools For Windows
#  - a native Windows implementation of common Unix utilities
#
# Written in 2013 by Ruben Van Boxem <vanboxem.ruben@gmail.com>
#
# To the extent possible under law, the author(s) have dedicated all copyright and related
# and neighboring rights to this software to the public domain worldwide. This software is
# distributed without any warranty.
#
# You should have received a copy of the CC0 Public Domain Dedication along with this software.
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
#

cmake_minimum_required (VERSION 2.8)

project(UnixToolsForWindows)

if(CMAKE_COMPILER_IS_GNUCXX)
set(CMAKE_CXX_FLAGS "-std=c++0x -pedantic-errors -Wextra -Wuninitialized -Winit-self -Wmissing-include-dirs -Wstrict-aliasing -Werror ${CMAKE_CXX_FLAGS}")
elseif("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
set(CMAKE_CXX_FLAGS "-std=c++0x -pedantic-errors -Weverything -Werror ${CMAKE_CXX_FLAGS}")
endif()

find_package(Boost REQUIRED)
include_directories(${Boost_INCLUDE_DIR})

# Support library
add_library(support support/support.h support/support.cpp)
include_directories(support)

# Optional DEVELOPMENT and FORTRAN Utilities
# admin
# cflow
# ctags
# cxref
# delta
# fort77
# get
# lex
# nm
# prs
# rmdel
# sact
# sccs
# unget
# val
# what
# yacc

# Utilities better implemented as persistent shell interpreter built-ins
# alias
# at
# basename
# batch
# bg
# cd
# command
# cp
# crontab
# dirname
# echo
# env
# expr
# false
# fc
# fg
# getconf
# getopts
# hash
# id
# ipcrm
# ipcs
# jobs
# kill
# locale
# localedef
# logger
# logname
# m4
# more
# mv
# newgrp
# nice
# nohup
# pathchk
# ps
# pwd
# qalter
# qdel
# qhold
# qmove
# qmsg
# qrerun
# qrls
# qselect
# qsig
# qstat
# qsub
# read
# renice
# sleep
# stty
# tabs
# tee
# test
# time
# tput
# true
# tty
# type
# ulimit
# umask
# unalias
# uname
# wait
# who
# write
# xargs

# Utilities not really fit for this project, or quite a bit of work all by themselves
# ar
# awk
# bc
# c99
# gencat
# join
# lp
# mailx
# make
# man
# mesg
# pax
# pr
# strip
# talk
# vi

# Utilities implemented
#add_executable(asa)
#add_executable(cal)
add_executable(cat cat/cat.cpp)
target_link_libraries(cat support)
#add_executable(chgrp)
#add_executable(chmod)
#add_executable(chown)
add_executable(cksum cksum/cksum.cpp)
add_executable(cmp cmp/cmp.cpp)
#add_subdirectory(comm)
#add_subdirectory(compress)
#add_subdirectory(csplit)
#add_subdirectory(cut)
add_executable(date date/date.cpp)
#add_executable(dd)
#add_executable(df)
#add_executable(diff)
#add_executable(du)
add_executable(echo echo/echo.cpp)
target_link_libraries(echo support)
#add_executable(ed)
#add_executable(ex)
add_executable(expand expand/expand.cpp)
add_executable(file file/file.cpp)
#add_executable(find)
#add_executable(fold)
#add_executable(fuser)
#add_executable(grep)
#add_executable(head head/head.cpp)
#add_executable(iconv iconv/iconv.cpp)
#add_executable(link link/link.cpp)
#add_executable(ln)
#add_executable(ls ls/ls.cpp)
#add_executable(mkdir mkdir/mkdir.cpp)
#add_executable(mkfifo)
#add_executable(nl)
#add_executable(od)
#add_executable(paste paste/paste.cpp)
#add_executable(patch)
#add_executable(printf printf/printf.cpp)
#add_executable(rm rm/rm.cpp)
#add_executable(rmdir rmdir/rmdir.cpp)
#add_executable(sed)
add_executable(sh sh/sh.cpp)
target_link_libraries(sh support)
#add_executable(sort sort/sort.cpp)
#add_executable(split split/split.cpp)
#add_executable(strings)
#add_executable(tail tail/tail.cpp)
#add_executable(touch touch/touch.cpp)
#add_executable(tr)
#add_executable(tsort)
#add_executable(uncompress)
#add_executable(unexpand unexpand/unexpand.cpp)
#add_executable(uniq)
#add_executable(unlink)
#add_executable(uucp)
#add_executable(uudecode)
#add_executable(uuencode)
#add_executable(uustat)
#add_executable(uux)
#add_executable(wc)
#add_executable(zcat)
